* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  font-family: Cambria, Cochin, Georgia, Times, "Times New Roman", serif;
  color: #1b2522;
}

.full-screen-header {
  /* * Based on the design we know that it should take 100% height of the user screen  */
  height: 100vh;
  /* *The header image is way too big, we need scale down  */
  /* *In order to do that we have a property called background size and set it to cover */
  background-image: url("./img/header_image.jpg");
  /* *So now the image is going to take as much as height or width it needs */
  background-size: cover;
  /* *Now we need to move the image so that the computer image will come down in the middle */
  /* *This will move over the image as the center portion is 40% */
  background-position-x: 40%;
  /* * Setting up the y-axis will come in handy if we have a wide desktop screen*/
  background-position-y: center;
  /* *In order to layout the elements in the center, use display flex */
  /* *This will make everything at the center of the screen */
  display: flex;
  /* * To make the .title and .sub-title, one coming after the other in newline, make the flex direction to column */
  flex-direction: column;
  justify-content: center;
  align-items: center;
  color: #fff;
  /* * Inside the header we have an image of scroll-down-icon and we want it at the bottom-center of the header, so for that we are making the header as position relative , so that we can use position absolute later on the scroll down icon */
  position: relative;
}

.nav {
  display: flex;
  justify-content: space-between;
  /* * In this way by providing the align items at the center, the image and the nav links will be lined up in the center vertically */
  align-items: center;
  background-color: #1b2522;
  padding: 0.5rem 1rem;
}

.nav-top {
  /* * We want the navbar to be fixed at the top position */
  position: fixed;
  /* * To bring it to the top , set the top as 0 */
  top: 0;
  /* * We can also set the left to 0 and right to 0 so that it will make sure that it spans  100% of the width becuase the left hand side is 0 pixel away from the left and right hand side is 0 pixel away from the right */
  left: 0;
  right: 0;
  /* * This will fill 100% of the screen */
  /* -------------- */
  /* * Also to make sure that this shows over top of everything, use z-index   */
  /* * So z-index:1 means it will be higher than everything else that comes after it */
  z-index: 1;
}

.logo {
  /* * To reduce the size of the logo */
  width: 50px;
}

.nav-list {
  display: flex;
  list-style: none;
}

.nav-list a {
  text-decoration: none;
  margin-left: 1rem;
  color: #fff;
}

.nav-list a:hover {
  color: #ccc;
}

.title {
  font-size: 3rem;
}

.sub-title {
  font-size: 1.5rem;
  margin-top: 0.3rem;
  margin-bottom: 1rem;
}

.btn {
  background-color: #00aaff;
  color: #fff;
  /* * If we make the border-radius to a very large number, it will have pill shape */
  border-radius: 10000px;
  padding: 0.25em 1em;
  text-decoration: none;
  border: none;
  cursor: pointer;
  /* *Usually the button size will be by default small, so we need the button to inherit the font size of its parent */
  font-size: inherit;
}

.btn:hover,
.btn:focus {
  background-color: #0088cc;
}

.scroll-down-icon {
  /* * We made the header as position:relative, so this scroll-down-icon will consider the header as it's parent container on applying position:absolute  */
  position: absolute;
  /* *So now we can see that the icon is 1rem below the bottom of the screen */
  /* * As it is contained in the flex box model of the header , it is already at the center, so we were able to bring it at the bottom center */
  bottom: 1rem;
  /* *We need to reduce the icon size */
  width: 30px;
}

.section {
  /* * This will space out the content from the edge of the screen */
  padding: 2rem;
}

.section-title {
  margin-bottom: 2rem;
  font-size: 2rem;
  text-align: center;
  color: #000;
}

.curriculum-grid {
  /* * Based on the design, we are going to use both grid and flex box */
  /* * We will be splitting the content into two columns using grid  */
  /* * And the elements inside will be aligned horizontally using flexbox */
  /* ---------------------- */
  display: grid;
  /* * We have 2 columns,and we are going to use minmax(), so that the minimum we need it to be auto-sized to be the essential size as large as it needs to be */
  /* * But at the maximum, we never want it to be more than 450px wide , so that it doesn't strecth too far on the screen */
  grid-template-columns: repeat(2, minmax(auto, 450px));
  /* *Now we need to make the content in the center */
  justify-content: center;
  row-gap: 10px;
  column-gap: 50px;
}

.curriculum-grid-item {
  display: flex;
  /* *This will make sure that the text and the image will be always at the center */
  align-items: center;
}

.curriculum-grid-item img {
  /* * To reduce the image size */
  width: 50px;
  /* *So when we use the flex box, it will give some space between the image and the text  */
  margin-right: 1rem;
}

.section-accent {
  background-color: #0af;
  padding: 1.5rem;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.free-title {
  color: #fff;
  font-size: 2.5rem;
  text-transform: uppercase;
}

.free-sub-title {
  color: #fff;
  /* *Max-width is set to 300px so that the text will be wrapped on to multiple lines instead of stretching across the entire screen. */
  max-width: 300px;
}

.form {
  /* * We need to set the max-width to 900px since otherwise the form will be as wide as the screen */
  max-width: 900px;
  /* *Now we need to center the form and to center it without using any flex box we can use this trick */
  /* * We are setting the top and bottom to 0 and left and right to auto which means it will try to put the same amount of margin in the left and the right which eventually centers the item  */
  margin: 0 auto;
}

.form label {
  color: #000;
  font-weight: bold;
}

.form input,
.form textarea {
  /* Start from here when starting the form related styling */
  /* *When we make the input width as 100% , it will make everything to show on top to bottom */
  width: 100%;
  margin-top: 0.25rem;
  margin-bottom: 0.75rem;
  outline: none;
  border: 1px solid #1b2522;
  border-radius: 0.3em;
  padding: 0.5em;
  /* * We want it to inherit the same color as the parent */
  color: inherit;
  /* *inside the text area different font was coming so make that also inherit */
  font-family: inherit;
}

.form textarea {
  /* * Currently the text area is resizable which will break the layout so we need to restrict the layout to resize it vertically only */
  resize: vertical;
  /* *We need to set a min-height and max-height so that it wouldn't expand beyond a range */
  min-height: 75px;
  max-height: 200px;
}

.form input:focus,
.form textarea:focus {
  border-color: #0af;
}

/* * Now we to need to make the button a square shape and also for algining it at the right side in html we need to wrap the button inside a div */

.btn-container {
  /* * This will bring the button towards the right side of the form */
  text-align: end;
}

.btn-square {
  border-radius: 0.3em;
}
