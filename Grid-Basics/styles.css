.item {
  border: 1px solid #333;
  background-color: #777;
  color: #ffff00;
}

.container {
  /* * By default just by adding the display:grid property, it doesn't do much */
  /*  * It just act like a block level element */
  /* display: grid; */
  /* * Here we  have specified 2 columns, and in this example we have 3 items */
  /* grid-template-columns: 100px 50px; */
  /* * So the first item will take 100px width, 2nd item will take 50px , so column 1 and 2 is taken */
  /* * Now the third item will be in column 1 and hence it takes 100px */
  /* ------------------------- */
  /* * in this below example we have specified 3 columns , so item 1 will take 100px (col-1), item-2 50px (col-2) and 3rd item will take 150px (col-3) */
  /* grid-template-columns: 100px 50px 150px; */
  /* ------------------------- */
  /*  * REMEMBER: grid-template-columns target WIDTH and grid-template-rows target height*/
  /* * Here, the  first row takes 50px height (item-1 and item-2 belongs to 1st row if   grid-template-columns: 100px 50px;) and  the second row (as item-3 is pushed to col-1 , it becomes part of 2nd row and hence it will have a height of 100px) */
  /* grid-template-rows: 50px 100px; */

  /* ------------Combining both rows and column in one syntax------------- */
  /* * We can specify both the grid template columns and row in one syntax using grid template. */
  /*  * [grid template : <row-pixel> <row-pixel> / <column-pixel> <column-pixel>]  , and here I use pixel as an example we can use any unit */
  /* grid-template: 50px 100px / 100px 50px; */

  /* ----------After adding 3 more div in html--------------- */
  /* * Now after adding 3 more divs to the html, we can see that as in "grid-template-rows: 50px 100px;" we have only mentioned 2 rows (1st row 50px and 2nd row 100px) and hence the 3rd row is not taking 50px instead it is taking only the default auto size of the elements  */
  /* grid-auto-rows: auto; */
  /*  * In grid-auto-rows , we define the size of any rows that we don't define in the grid-template-rows.   */
  /* * By default the value will be grid-auto-rows: auto; and it will take only the default size of the elements  */
  /* ------------------------- */
  /* * In this case now every single row that gets added will have a height of 100px */
  /* grid-auto-rows: 100px; */
  /* ------------------------- */
  /* * In this case now every single row that gets added will have a height of 100px and 150px alternatively, so after the initial rows in which we have specified height, the next coming row will take 100px , then the next one takes 150px and then the next one takes 100px and so on */
  /* grid-auto-rows: 100px 150px; */

  /* ------------------------- */
  /*  * We can do the same thing with columns also , which is going to define how large the extra columns going to be (width)  */
  /* * But we can see that nothing is getting added to the extra column spaces  */
  /* * This is happening because of the way the grid flows */
  /* grid-auto-columns: 150px 100px; */
  /* ------------------------- */
  /* * The grid-auto-flow property determines where the new elements are added that are not defined in grid-template-columns and grid-template-rows */
  /* *By default the grid-auto-flow is set to row   */
  /* * Every new element is added to a new row */
  /* * grid-auto-flow: row; means it will be in row-wise order meaning item-1 will be in (row-1,col-1) , item-2 (row1,col-2), item-3(row2,col-1) and so on  */
  /* grid-auto-flow: row; */
  /* ------------------------- */
  /* * We can change this to column and now every new element is added to a new column   */
  /* * So in the example, item-5 and item-6 will be added to new column item-5( it will be newly created column 3 and belongs to row 1 and item 6 also belongs to same  column 3 but based on example it will be in row 2 as we have defined two rows in grid-template-rows */
  /* * Also as we have set grid-auto-columns: 150px 100px; , the item-5 will take 150px and item-6 150px and if we had a 7th item then it would take 100px*/
  /* * The grid auto flow set to column  will fill the item in column-order which means item-1 and item-2 in column 1, item-3 and item-4 in column 2 and so on */
  /* grid-auto-flow: column; */
  /* ------------------------- */
  /* ------------------------- */
  /* * grid-template-areas will allow us to create named sections  inside of the container*/
  /* display: grid;
  grid-template-columns: 100px 50px;
  grid-template-rows: 50px 100px;
  grid-template-areas:
    "header header"
    "sidebar content"; */
  /* * Inside of quotes we will mention the name for each cell inside the grid and in this example we have 4 cells (2 columns and 4 rows , so 4 cell grid) */
  /* * The first row is represented by the string "header header". This means that this row contains two cells, both named "header". Each cell in this row represents a column. So, effectively, "header" is the name given to the columns in the first row. The second row is represented by the string "sidebar content". This means that this row contains two cells, the first named "sidebar" and the second named "content". Again, each cell in this row represents a column. So, "sidebar" and "content" are the names given to the columns in the second row. */
  /* ------------------------- */
  /* ------------------------- */
  /* * By specifying grid-template-areas: "header header"  "sidebar content"; Nothing is going to change in terms of layout because we need to tell the grid , which cells(items) go into the specified areas   */
  /* * So in .item-2 specify the grid-area as header */
  /* ------------------------- */
  /* ------------------------- */
  /* display: grid;
  grid-template-columns: 100px 50px 75px;
  grid-template-rows: 50px 100px; */
  /* * Here in this example, we have added 75px to the third column and want the header to span till 3rd column */
  /* * And if we want anything else to shown in the other section then use "." */
  /* * So header spans everything, sidebar is at far left at 2nd row,content will be at the center column of 2nd row and anything which we want to show will be in the third section  */
  /* grid-template-areas:
    "header header header"
    "sidebar content ."; */
  /* ------------------------- */
  /* ------------------------- */

  /* display: grid;
  grid-template-columns: 100px 50px 75px;
  grid-template-rows: 50px 100px; */

  /* ------------------------- */
  /* ------------------------- */
  /* * We can use fratcional units with grid */
  display: grid;
  /* grid-template-columns: 1fr 2fr 1fr; */
  grid-template-rows: 50px 100px;
  /* * So if we want a row with 4 equally sized columns then we can use :- */
  /* grid-template-columns: 1fr 1fr 1fr 1fr; */
  /* * Also instead of specifying the 1fr --> 4 times , we can use repeat */
  /* grid-template-columns: repeat(4, 1fr); */
  /* * This above code will also give us 4 equally sized columns */
  /*  * We can specify grid-template-columns: repeat(4, 100px); which also works fine */
  /* ------------------------- */
  /* ------------------------- */
  /* *So in this below example , the first column will take 50px , 2nd and 3rd takes 100px and 4th column takes 50px */
  /* grid-template-columns: 50px repeat(2, 100px) 50px; */
  /* grid-template-columns: 50px repeat(2, 1fr) 50px; */
  /* * So once we add some content into item-1 we could see that the content is overflowing, so to make it not overflow we need to specify minmax() */
  grid-template-columns: 150px repeat(2, 100px) 50px;
  /* * as we have specified Auto ,auto sizing tells that be as large it needs to be to fit all of the text inside of it but not any more larger than that. */
  /* * So this row will be 50px wide and it will take the height necessary to fit the content */
  grid-template-rows: minmax(50px, auto) 100px;
  /* ------------------------- */
  /* ------------------------- */
  /* * Also with grid we can use gap which we can't use with flexbox  */
  /*  * In grid we can use gap in between rows and columns */
  /* row-gap: 10px;
  column-gap: 20px; */
  /* * And if we want the same gap between the rows and columns */
  gap: 15px;
  /* * We can also use justofy-content with grid as well */
  /* justify-content: center; */
  /* * In grid we have to use start and end and in flex we use flex-start and flex-end */
  justify-content: center;
  /* * Align content will allow us to align the entire content not  the items inside but the whole content will be aligned */
  /* * So if we add height to the container , we can see that the items are at the center of the 500px*/
  height: 500px;
  background-color: #aaa;
  align-content: center;
}

/* * Also remember not to put the area name not in quotes, if  we put it inside quotes it wouldn't work */
.item-1 {
  /* * Now we can see that the item-1 is at the (row-2,col-2) position */
  /* grid-area: content; */
  /* ------------------------- */
  /* ------------------------- */
  /*  * We want the item to start at column 1 and end at column 2 , while specifying the end we need to specify it (required number + 1 ) so in this case end = 2 + 1 = 3.  */
  /*  * So in row-1, the item-1 will span two columns */
  /* grid-column-start: 1;
  grid-column-end: 3; */
  /* * We can also shorten the same using grid-colum: <start> / <end> */
  /* grid-column: 1 / 3; */
  /* ------------------------- */
  /* ------------------------- */
  /* * We can also do the same thing with row */
  /* grid-row-start: 1;
  grid-row-end: 3; */
  /* * We can also use the shorthand version by mentioning grid-row */
  /* grid-row: 1 /3; */
  /* ------------------------- */
  /* ------------------------- */
  /* * We can also provide single values, grid-row:2 means item-1 will be in row-2 */
  /* grid-row: 2; */
  /*  * We can also make the item-1 span 2 rows */
  /* grid-row: span 2; */
  /* * If we want the item-1 to span 2 rows as well as span the entire columns of row 1 then we can use:- */
  /* grid-column: 1 / -1;
  grid-row: span 2; */
}

.item-2 {
  /* * Now we can see that the item-2 is occupying both the columns (header and header ) and item-2 is taking row1 and (col-1 and col-2)*/
  /* grid-area: header; */
}

.item-6 {
  /* * This will be in row-2 col-1 position */
  /* grid-area: sidebar; */
}
